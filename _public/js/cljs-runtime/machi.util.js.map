{"version":3,"sources":["machi/util.cljs"],"mappings":"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","names":["machi.util/create-deck","machi.util/create-game","players","cljs.core/count","cljs.core.println","cljs.core.reduce","game","p","pl","cljs.core.conj","cljs.core.get","cljs.core.assoc","machi.util/get-player-in-turn","machi.util/swap-values","key","val","machi.util/get-player-money","player","cljs.core.get_in","machi.util/get-card","card-name","machi.definitions/machi-cards","machi.util/get-money","machi.util/remove-add-cash-from-player","amt","cljs.core.update_in","cljs.core/+","machi.util/get-players","stack","fexpr__37538","machi.util/get-cards-from-game","pcards","cljs.core.into","cljs.core.concat","card-stack","card","machi.util/activate?","dice","activate","cljs.core._EQ_","machi.util/card-to-player","cljs.core/contains?","cljs.core/inc","cljs.core/assoc-in","machi.util/remove-card-from-deck","cljs.core/dec","machi.util/create-card-stack","d1","d2","mall","pit","cards","col","n","o","money","g","pn","ga","machi.util/can-buy?","player-name","machi.util/switch-turn","cljs.core.update","cljs.core/-"],"sourcesContent":["(ns machi.util\n  (:require [machi.definitions :as cards]))\n\n\n;Create Game ----------------------------------------------\n\n(defn create-deck\n  []\n  ;[\"Wheat Field\",\"Wheat Field\",\"Wheat Field\",\"Wheat Field\",\"Wheat Field\",\"Wheat Field\",\"Ranch\",\"Ranch\",\"Ranch\",\"Ranch\",\"Ranch\",\"Ranch\",\"Forest\",\"Forest\",\"Forest\",\"Forest\",\"Forest\",\"Forest\",\"Mine\",\"Mine\",\"Mine\",\"Mine\",\"Mine\",\"Mine\",\"Apple Orchard\",\"Apple Orchard\",\"Apple Orchard\",\"Apple Orchard\",\"Apple Orchard\",\"Apple Orchard\",\"Apple Orchard\",\"Bakery\",\"Bakery\",\"Bakery\",\"Bakery\",\"Bakery\",\"Bakery\",\"Convenience Store\",\"Convenience Store\",\"Convenience Store\",\"Convenience Store\",\"Convenience Store\",\"Convenience Store\",\"Convenience Store\",\"Convenience Store\",\"Cheese Factory\",\"Cheese Factory\",\"Cheese Factory\",\"Cheese Factory\",\"Cheese Factory\",\"Cheese Factory\",\"Furniture Factory\",\"Furniture Factory\",\"Furniture Factory\",\"Furniture Factory\",\"Furniture Factory\",\"Furniture Factory\",\"Fruit and Vegetable Market\",\"Fruit and Vegetable Market\",\"Fruit and Vegetable Market\",\"Fruit and Vegetable Market\",\"Fruit and Vegetable Market\",\"Fruit and Vegetable Market\",\"Caf\u00e9\",\"Caf\u00e9\",\"Caf\u00e9\",\"Caf\u00e9\",\"Caf\u00e9\",\"Caf\u00e9\",\"Family Restaurant\",\"Family Restaurant\",\"Family Restaurant\",\"Family Restaurant\",\"Family Restaurant\",\"Family Restaurant\",\"Family Restaurant\",\"Stadium\",\"Stadium\",\"Stadium\",\"Stadium\",\"TV Station\",\"TV Station\",\"TV Station\",\"TV Station\",\"Business Center\",\"Business Center\",\"Business Center\",\"Business Center\"]\n  {\"Wheat Field\" 6 \"Ranch\" 6 \"Forest\" 6 \"Mine\" 6 \"Apple Orchard\" 6 \"Bakery\" 6 \"Convenience Store\" 6 \"Cheese Factory\" 6 \"Furniture Factory\" 6 \"Fruit and Vegetable Market\" 6 \"Cafe\" 6 \"Family Restaurant\" 6})\n\n(defn create-game\n  [players]\n  (if (< (count players) 2)\n  (println \"Not Enough Players\")\n  (reduce\n    (fn [game p]\n      (let [pl (conj (get game :players) {:name (get p 1)\n                                         :position (get p 0)\n                                         :cards {\"Wheat Field\" {\n                                                                :amount 1\n                                                                :coin 1\n                                                                :color \"b\"\n                                                                :activation [1]}\n                                                 \"Bakery\" {\n                                                           :amount 1\n                                                           :coin 1\n                                                           :color \"g\"\n                                                           :activation [2,3]}}\n                                         :money 3\n                                         :landmarks #{}})]\n        (assoc game :players pl)))\n    {:card-stack [] :player-in-turn 1 :deck (create-deck) :num-player 0 :players []} players )))\n\n(defn get-player-in-turn\n  [game]\n  (get game :player-in-turn))\n\n;Access Game Elements--------------------------------------\n\n(defn swap-values\n  [game key val]\n  \"Nothing\")\n\n(defn get-player-money\n  [game player]\n  (get-in game [:players player :money]))\n\n(defn get-card\n  [card-name]\n  (get cards/machi-cards card-name))\n\n(defn get-money\n  [game player]\n  (get-in  game [:players 0]))\n\n(defn remove-add-cash-from-player\n  [game player amt]\n  (update-in game [:players player :money] + amt))\n\n(defn get-players\n  [game]\n  (reduce (fn [stack player] (conj stack ((get player :position),player))) [] game))\n\n(defn get-cards-from-game\n  [game]\n  (reduce\n   (fn [stack pcards] (into (concat stack (reduce\n                                            (fn [card-stack card] (conj card-stack [(get pcards :position),card] )) [] (get pcards :cards)))) ) [] (get game :players)))\n\n(defn activate?\n  [card dice]\n  (let [activate (get card :activation)]\n    (if (< (count activate) 2)\n      (if (= (get activate 0) dice)\n          true\n          false)\n      (if (or (= (get activate 0) dice) (= (get activate 1) dice))\n        true\n        false))))\n\n;Return new altered games from the initial state -------------\n\n(defn card-to-player\n  [game player card-name]\n  (if (contains? (get-in game [:players player :cards]) card-name)\n    (update-in game [:players player :cards card-name :amount] inc)\n    (as-> (get-card card-name) card\n      (assoc-in game [:players player :cards card-name] {:amount 1\n                                                         :color (get card :color)\n                                                         :coin (get card :coin)\n                                                         :activation (get card :activation)}))))\n\n\n\n(defn remove-card-from-deck\n  [game card-name]\n  (update-in game [:deck card-name] dec))\n\n\n; (defn resolve-card-stack\n;   ([stack src dst amt]\n;    for )\n;   ([stack dst amt]))\n\n;(defn activation?)\n\n(defn create-card-stack\n  [game player d1 d2]\n  (let [mall (contains? (get-in game [player :landmarks]) \"Shopping Mall\")\n        pit (- (get game :player-in-turn) 1)\n        cards (get-cards-from-game game)]\n    (reduce (fn [game card]\n      (let [col (get-in card [1 1 :color])\n            n (println card)\n            o (println col)\n            money (get-in card [1 1 :coin])]\n      (cond\n        (= col \"r\") (as-> game g\n                          (remove-add-cash-from-player g pit (- money))\n                          (remove-add-cash-from-player g (- (get card 0) 1) money))\n        ;Fix the one below\n        (= col \"b\") (remove-add-cash-from-player game (- (get card 0) 1) money)\n        (and (= col \"g\") (= (- (get card 0) 1) (get game :player-in-turn))) (remove-add-cash-from-player game pit money)\n        (and (= col \"p\") (= player (get game :player-in-turn))) (let [pn  (reduce (fn [stack p] (conj stack (- (get p :position) 1))) [] (get game :players))]\n                                                                  (as-> game ga\n                                                                        (reduce (fn [g p] (remove-add-cash-from-player g p money)) ga pn)\n                                                                        (remove-add-cash-from-player game pit (* (+ (count (get ga :players)) 1) money))))\n        :else game))) game cards)))\n\n(defn can-buy?\n  [game player-name card-name]\n  \"Nothing\")\n\n(defn switch-turn\n  [game]\n  (if (< (get-player-in-turn game) (count (get game :players)))\n    (update game :player-in-turn + 1)\n    (update game :player-in-turn - (count (get game :players)))))\n;(defn end-game?)\n"]}